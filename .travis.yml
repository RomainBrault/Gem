# Copyright Louis Dionne 2013-2016
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

language: c++
sudo: false

# Do not build branches of the form "pr/*". By prefixing pull requests coming
# from branches inside the repository with pr/, this avoids building both the
# branch push _and_ the pull request.
branches:
  except: /pr\/.*/

env:
  global:
    # GitHub token for pushing the documentation, logging in with the
    # Travis command line utility and so on. The token is stored in the
    # ${GITHUB_TOKEN} environment variable.
    - secure: "rPQJLI2cIaSf6RY90qb5/OGgjVuY213V9ZNxsSjbDtYwuxaN2LZwmx9Q1hc1nh4QkHRP1LvuttHvBVlg4xJeadnfYjS9QgM0ZfEjG/ulkRUCCtwpduMcolZidJSkjdIjNmDRz7yzOTVsJYc8hEMfoEK4PMDykehKdAvElrGEzwrnviRjPIqZMa6sL48BhxbFaLC3adqBCNqAQX/9gkLM8LC1sfne8krrnmS8571gIfzXwVHbQUIWhk4tu8uKI+Jr2+ZBMLiu/VYvTgXXdaZw/Z0zgQeLjyar9fyOzbiD4DUJjaoR9dXyitCRfRIX/nkGLp8nvH8PhF728xNM8JY2nvyVV8Ejqcq7uu9VDHlBTgVHudX3PvlvAG13llyPgfpxygzZVLxUXqkpnhba3JincfoKiuuGmRaiSB5k1FEZDctQCalnbNIO67SpLGybIs14CCoUg49clcORvGjSML9xb5L/kUbiQfz2sfdSg144tKEkI7VKB5NLaG0Ovxdm7n+JI5CZpp25TydvkwDBNs6Nq8uyZImwioJ8Plv0f/MITGPQOoYHo691vZwhveONRJQWpD11HeUwtBMHHRwQC+3NpmpIRWVaNggqlbuM05EJMERBSYIhiv/DfBRra5Xf441szhoxA/ArxJhLbaGqMbVkNLH556i4TTJc/cvFAycm/gU="

  # Workaround for https://github.com/travis-ci/travis-ci/issues/4681
  matrix:
    - TRAVIS_EMPTY_JOB_WORKAROUND=true

addons:
  apt:
    packages:
      - valgrind
      - g++-6
    sources: &sources
      - ubuntu-toolchain-r-test


cache:
  directories:

matrix:
  exclude:
    - env: TRAVIS_EMPTY_JOB_WORKAROUND=true

  include:
    ##########################################################################
    # Check for code formatting errors
    ##########################################################################
    - os: osx
      env: CHECK_FORMATTING=true
      osx_image: xcode8

    ##########################################################################
    # Build with the main configuration on all the supported compilers
    #
    # Note that we only use the memory checker on the main configuration to
    # speed up Travis builds.
    ##########################################################################
    # GCC 6
    - os: linux
      env: UNIT_TESTS=true COMPILER=g++-6
      compiler: gcc

    ##########################################################################
    # Generate the documentation
    ##########################################################################
    - os: linux
      env: DOCUMENTATION=true COMPILER=g++-6
      compiler: gcc

    ##########################################################################
    # Benchmarks
    ##########################################################################
    # - os: linux
    #   env: BENCHMARKS=true COMPILER=g++-6 CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release -DCTEST_OUTPUT_ON_FAILURE=true"
    #   compiler: gcc


install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Setup default versions and override compiler if needed
  ############################################################################
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi

  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.5/cmake-3.5.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
    fi

  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.11.linux.bin.tar.gz"
      mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
      export PATH=${DEPS_DIR}/doxygen/bin:${PATH}
    fi

  ############################################################################
  # Install and use a more recent Ruby and install the gems for the benchmarks
  ############################################################################
  - rvm use 2.1 --install --binary --fuzzy
  - gem install ruby-progressbar tilt

  ############################################################################
  # Install tools to check for code formatting errors (run on OS X only)
  ############################################################################
  - if [[ "${CHECK_FORMATTING}" == "true" ]]; then brew install pcre vera++; fi


before_script:
  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"

  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################
  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake .. ${CMAKE_OPTIONS})


script:
  ############################################################################
  # Check for common formatting errors.
  ############################################################################
  - |
    if [[ "${CHECK_FORMATTING}" == "true" ]]; then
      # Find non-ASCII characters in headers
      hpps=$(find include doc -name \*\.hpp)
      cpps=$(find tests examples -name \*\.cpp)
      pcregrep --color='auto' -n "[\x80-\xFF]" ${hpps} ${cpps}
      if [[ $? -ne 1 ]]; then exit 1; fi

      # F001: Source files should not use the '\r' (CR) character
      # L001: No trailing whitespace at the end of lines
      # L002: Don't use tab characters
      find include -name \*\.hpp | vera++ --rule F001 --rule L001 --rule L002 --error
    fi

  ############################################################################
  # Only push the documentation when we're on master, otherwise just make sure
  # it builds properly.
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" && "${BOOST_BUILD}" != "true" ]]; then
      (cd build && ! make doc 2>&1 | grep -E "warning|error") || exit 1

      if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
        # Suppress output to avoid leaking the token when the command fails
        git clone https://RomainBrault:${GITHUB_TOKEN}@github.com/RomainBrault/Gem --depth 1 --branch=gh-pages doc/html &>/dev/null

        rm -rf doc/html/{search,*.png,*.css,*.js,*.html}
        cp -R build/doc/html/* doc/html/

        pushd doc/html
        git add --all .
        git commit --allow-empty -m "Update to ${TRAVIS_COMMIT:0:7}"
        # Suppress output to avoid leaking the token
        travis_retry git push origin gh-pages &>/dev/null
        popd
      fi
    fi

  - |
    if [[ "${DOCUMENTATION}" == "true" && "${BOOST_BUILD}" == "true" ]]; then
      touch Jamroot
      (cd doc && b2)
    fi

  ############################################################################
  # We only run the full benchmarks on `master` when we're not in a pull
  # request, because otherwise it takes too much Travis resources. Otherwise,
  # we only run partial benchmarks to make sure they compile and run properly.
  #
  # Note: The benchmarks associated to a version of the documentation are
  #       stored in `doc/html/benchmarks/`.
  ############################################################################
  - |
    if [[ "${BENCHMARKS}" == "true" ]]; then
      if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
        (cd build && make benchmarks) || exit 1
        compiler_slug=$(cd build && make travis_compiler_slug | grep 'travis_compiler_slug:' | cut -d ' ' -f 2)
        config_slug=$(cd build && make travis_config_slug | grep 'travis_config_slug:' | cut -d ' ' -f 2)

        # Suppress output to avoid leaking the token when the command fails
        git clone https://RomainBrault:${GITHUB_TOKEN}@github.com/RomainBrault/Gem --depth 1 --branch=gh-pages doc/html &>/dev/null
        rm -rf doc/html/benchmarks/${config_slug}/${compiler_slug}/
        mkdir -p doc/html/benchmarks/${config_slug}/${compiler_slug}/
        for benchmark in $(ls build/benchmark/*.json | grep -v ".erb"); do
          cp ${benchmark} doc/html/benchmarks/${config_slug}/${compiler_slug}/
        done

        pushd doc/html
        git add --all .
        git commit --allow-empty -m "Update benchmarks to ${TRAVIS_COMMIT:0:7} for build type '${config_slug}' and compiler '${compiler_slug}'"
        # Suppress output to avoid leaking the token
        travis_retry git push origin gh-pages &>/dev/null
        popd
      else
        export BOOST_HANA_JUST_CHECK_BENCHMARKS=true
        (cd build && make benchmarks -j2)
      fi
    fi

  ############################################################################
  # Build and run the unit tests and examples.
  ############################################################################
  - |
    if [[ "${UNIT_TESTS}" == "true" && "${BOOST_BUILD}" != "true" ]]; then
      export CTEST_PARALLEL_LEVEL=2 # Run unit tests on two cores
      (cd build && make check -j2 -k)
    fi

  - |
    if [[ "${UNIT_TESTS}" == "true" && "${BOOST_BUILD}" == "true" ]]; then
      touch Jamroot
      echo "using clang : : ${CXX} ;" > project-config.jam
      if [[ "${LDFLAGS}" == "" ]]; then
        (cd test && b2 toolset=clang cxxflags="-std=c++1y ${CXXFLAGS}" include="${BOOST_DIR}")
      else
        (cd test && b2 toolset=clang cxxflags="-std=c++1y ${CXXFLAGS}" include="${BOOST_DIR}" linkflags="${LDFLAGS}")
      fi
    fi


notifications:
  webhooks:
    urls: https://webhooks.gitter.im/e/ce1e3a2036d94b4a644f
    on_success: change
    on_failure: always
